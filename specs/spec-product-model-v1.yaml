openapi: 3.0.4
info:
  title: crowdproj-product-models
  description: Microservice for description, management and provisioning of the specific model of a product with its own values of properties.
  contact:
    name: Sergey Okatov
    email: sokatov@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: product-model
    description: support the product models microservice

paths:
  /product/model/create:
    post:
      tags:
        - product-model
      summary: Create product model
      operationId: ProductModelCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductModelCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductModelCreateResponse'

  /product/model/read:
    post:
      tags:
        - product-model
      summary: Read product models
      operationId: ProductModelsRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductModelReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductModelReadResponse'

  /product/model/update:
    post:
      tags:
        - product-model
      summary: Update product model
      operationId: ProductModelUpdate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductModelUpdateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductModelUpdateResponse'

  /product/model/delete:
    post:
      tags:
        - product-model
      summary: Delete product model
      operationId: ProductModelDelete
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductModelDeleteRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductModelDeleteResponse'

  /product/model/search:
    post:
      tags:
        - product-model
      summary: Search product model
      operationId: ProductModelSearch
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductModelSearchRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductModelSearchResponse'

components:
  schemas:

    IProductModelRequest:
      allOf:
        - $ref: './base.yaml#/components/schemas/IRequest'
        - type: object
          discriminator:
            propertyName: requestType
            mapping:
              create: '#/components/schemas/ProductModelCreateRequest'
              read: '#/components/schemas/ProductModelReadRequest'
              update: '#/components/schemas/ProductModelUpdateRequest'
              delete: '#/components/schemas/ProductModelDeleteRequest'
              search: '#/components/schemas/ProductModelSearchRequest'

    IProductModelResponse:
      allOf:
        - $ref: './base.yaml#/components/schemas/IResponse'
        - type: object
          discriminator:
            propertyName: responseType
            mapping:
              create: '#/components/schemas/ProductModelCreateResponse'
              read: '#/components/schemas/ProductModelReadResponse'
              update: '#/components/schemas/ProductModelUpdateResponse'
              delete: '#/components/schemas/ProductModelDeleteResponse'
              search: '#/components/schemas/ProductModelSearchResponse'

    Error:
      $ref: './base.yaml#/components/schemas/Error'

    RequestId:
      $ref: './base.yaml#/components/schemas/RequestId'

    ProductModelLock:
      type: string
      description: Версия оптимистичной блокировки

    ResponseResult:
      $ref: './base.yaml#/components/schemas/ResponseResult'

    RequestDebug:
      $ref: './base.yaml#/components/schemas/CpRequestDebug'

    ProductModelId:
      type: string
      description: Product model ID

    UserId:
      type: string
      description: User id

    BaseProductModel:
      type: object
      description: Object describes product models that are the same for create and update
      properties:
        name:
          type: string
          description: Product model name
        description:
          type: string
          description: Product model description
        productGroupId:
          type: string
          description: Product group id # from "Product group" microservice

    ProductModelCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseProductModel'

    ProductModelUpdateObject:
      allOf:
        - $ref: '#/components/schemas/BaseProductModel'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ProductModelId'
            lock:
              $ref: '#/components/schemas/ProductModelLock'

    ProductModelCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IProductModelRequest'
        - $ref: '#/components/schemas/RequestDebug'
        - type: object
          properties:
            productModel:
              $ref: '#/components/schemas/ProductModelCreateObject'

    ProductModelReadRequest:
      allOf:
        - $ref: '#/components/schemas/IProductModelRequest'
        - $ref: '#/components/schemas/RequestDebug'
        - type: object
          properties:
            productModelIds:
              type: array
              items:
                $ref: '#/components/schemas/ProductModelId'

    ProductModelUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/IProductModelRequest'
        - $ref: '#/components/schemas/RequestDebug'
        - type: object
          properties:
            productModel:
              $ref: '#/components/schemas/ProductModelUpdateObject'

    ProductModelDeleteRequest:
      allOf:
        - $ref: '#/components/schemas/IProductModelRequest'
        - $ref: '#/components/schemas/RequestDebug'
        - type: object
          properties:
            productModelId:
              $ref: '#/components/schemas/ProductModelId'
            lock:
              $ref: '#/components/schemas/ProductModelLock'

    ProductModelSearchRequest:
      allOf:
        - $ref: '#/components/schemas/IProductModelRequest'
        - $ref: '#/components/schemas/RequestDebug'
        - type: object
          properties:
            ProductModelFilter:
              $ref: '#/components/schemas/ProductModelSearchFilter'

    ProductModelSearchFilter:
      type: object
      description: filters for Product models search
      properties:
        name:
          type: string
          description: Product model name
        description:
          type: string
          description: Product model description



    ProductModelResponseObject:
      allOf:
        - type: object
          description: Object that is returned in the backend response
          properties:
            id:
              $ref: '#/components/schemas/ProductModelId'
            ownerId:
              $ref: '#/components/schemas/UserId'
            deleted:
              type: boolean
              description: Product model deletion flag
              example: false
            lock:
              $ref: '#/components/schemas/ProductModelLock'
        - $ref: '#/components/schemas/BaseProductModel'

    ProductModelResponseSingle:
      allOf:
        - type: object
          description: Response with one product model
          properties:
            productModel:
              $ref: '#/components/schemas/ProductModelResponseObject'

    ProductModelResponseMulti:
      allOf:
        - type: object
          description: Response with list of product models
          properties:
            productModels:
              type: array
              items:
                $ref: '#/components/schemas/ProductModelResponseObject'

    ProductModelCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IProductModelResponse'
        - $ref: '#/components/schemas/ProductModelResponseSingle'

    ProductModelReadResponse:
      allOf:
        - $ref: '#/components/schemas/IProductModelResponse'
        - $ref: '#/components/schemas/ProductModelResponseMulti'

    ProductModelUpdateResponse:
      allOf:
        - $ref: '#/components/schemas/IProductModelResponse'
        - $ref: '#/components/schemas/ProductModelResponseSingle'

    ProductModelDeleteResponse:
      allOf:
        - $ref: '#/components/schemas/IProductModelResponse'
        - $ref: '#/components/schemas/ProductModelResponseSingle'

    ProductModelSearchResponse:
      allOf:
        - $ref: '#/components/schemas/IProductModelResponse'
        - $ref: '#/components/schemas/ProductModelResponseMulti'